#compdef wfadm

autoload -U is-at-least

_wfadm() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_wfadm_commands" \
"*::: :->wfadm" \
&& ret=0
    case $state in
    (wfadm)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-command-$line[1]:"
        case $line[1] in
            (build)
_arguments "${_arguments_options[@]}" : \
'-u+[The username of the management user]: :_default' \
'--username=[The username of the management user]: :_default' \
'-p+[The password of the management user]: :_default' \
'--password=[The password of the management user]: :_default' \
'--chunks=[Build the images in chunks of this size. If not specified, the images are built in one go.]: :_default' \
'--standalone[Build standalone images only]' \
'--domain[Build domain controller and host controller images only]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':wildfly-version -- A single WildFly version or version range:_default' \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" : \
'--chunks=[Push the images in chunks of this size. If not specified, the images are pushed in one go.]: :_default' \
'--standalone[Push standalone images only]' \
'--domain[Push domain controller and host controller images only]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':wildfly-version -- A single WildFly version or version range:_default' \
&& ret=0
;;
(start)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the standalone server \[default\: wfadm-sa-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--name=[The name of the standalone server \[default\: wfadm-sa-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-p+[The published HTTP port \[default\: 8<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--http=[The published HTTP port \[default\: 8<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-m+[The published management port \[default\: 9<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--management=[The published management port \[default\: 9<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-o+[The offset added to the published HTTP and management ports. Not allowed when multiple versions are specified.]: :_default' \
'--offset=[The offset added to the published HTTP and management ports. Not allowed when multiple versions are specified.]: :_default' \
'*--operations=[A comma seperated list of operations to bootstrap the standalone server. Can be provided multiple times.]: :_default' \
'--cli=[A file with operations to bootstrap the standalone server]: :_default' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':wildfly-version -- A single WildFly version or version range:_default' \
'*::wildfly-parameters -- Parameters passed to the standalone server:_default' \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the standalone server \[default\: wfadm-sa-<major><minor>\]]: :_default' \
'--name=[The name of the standalone server \[default\: wfadm-sa-<major><minor>\]]: :_default' \
'-a[Stop all running standalone servers. If specified with a version, stop all running standalone servers of that version.]' \
'--all[Stop all running standalone servers. If specified with a version, stop all running standalone servers of that version.]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::wildfly-version -- A single WildFly version or version range:_default' \
&& ret=0
;;
(dc)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_wfadm__dc_commands" \
"*::: :->dc" \
&& ret=0

    case $state in
    (dc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-dc-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the domain controller \[default\: wfadm-dc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--name=[The name of the domain controller \[default\: wfadm-dc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-p+[The published HTTP port \[default\: 8<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--http=[The published HTTP port \[default\: 8<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-m+[The published management port \[default\: 9<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--management=[The published management port \[default\: 9<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-o+[The offset added to the published HTTP and management ports. Not allowed when multiple versions are specified.]: :_default' \
'--offset=[The offset added to the published HTTP and management ports. Not allowed when multiple versions are specified.]: :_default' \
'*-s+[Manage servers of the domain controller. Servers are specified as a comma seperated list of <name>\[\:<server-group>\]\[\:<offset>\]\[\:start\].  The option can be specified multiple times.  <name>          The name of the server. This part is mandatory and must be first.                 All other parts are optional. <server-group>  The name of the server group. Allowed values are '\''main-server-group'\'' or '\''msg'\'',                 and '\''other-server-group'\'' or '\''osg'\''. If not specified, '\''main-server-group'\'' is used. <offset>        The port offset. If not specified, 100 is used from the second server onwards. start           Whether to start the server.]: :_default' \
'*--server=[Manage servers of the domain controller. Servers are specified as a comma seperated list of <name>\[\:<server-group>\]\[\:<offset>\]\[\:start\].  The option can be specified multiple times.  <name>          The name of the server. This part is mandatory and must be first.                 All other parts are optional. <server-group>  The name of the server group. Allowed values are '\''main-server-group'\'' or '\''msg'\'',                 and '\''other-server-group'\'' or '\''osg'\''. If not specified, '\''main-server-group'\'' is used. <offset>        The port offset. If not specified, 100 is used from the second server onwards. start           Whether to start the server.]: :_default' \
'*--operations=[A comma seperated list of operations to bootstrap the domain controller. Can be provided multiple times.]: :_default' \
'--cli=[A file with operations to bootstrap the domain controller]: :_default' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':wildfly-version -- A single WildFly version or version range:_default' \
'*::wildfly-parameters -- Parameters passed to the domain controller:_default' \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the domain controller \[default\: wfadm-dc-<major><minor>\]]: :_default' \
'--name=[The name of the domain controller \[default\: wfadm-dc-<major><minor>\]]: :_default' \
'-a[Stop all running domain controllers. If specified with a version, stop all running domain controllers of that version.]' \
'--all[Stop all running domain controllers. If specified with a version, stop all running domain controllers of that version.]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::wildfly-version -- A single WildFly version or version range:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__dc__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-dc-help-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(hc)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_wfadm__hc_commands" \
"*::: :->hc" \
&& ret=0

    case $state in
    (hc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-hc-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the host controller \[default\: wfadm-hc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--name=[The name of the host controller \[default\: wfadm-hc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'-d+[The name of the domain controller \[default\: wfadm-dc-<major><minor>\]. Required if different versions are specified.]: :_default' \
'--domain-controller=[The name of the domain controller \[default\: wfadm-dc-<major><minor>\]. Required if different versions are specified.]: :_default' \
'-u+[The username to connect to the domain controller]: :_default' \
'--username=[The username to connect to the domain controller]: :_default' \
'-p+[The password to connect to the domain controller]: :_default' \
'--password=[The password to connect to the domain controller]: :_default' \
'*-s+[Manage servers of the host controller. Servers are specified as a comma seperated list of <name>\[\:<server-group>\]\[\:<offset>\]\[\:start\].  The option can be specified multiple times.  <name>          The name of the server. This part is mandatory and must be first.                 All other parts are optional. <server-group>  The name of the server group. Allowed values are '\''main-server-group'\'' or '\''msg'\'',                 and '\''other-server-group'\'' or '\''osg'\''. If not specified, '\''main-server-group'\'' is used. <offset>        The port offset. If not specified, 100 is used from the second server onwards. start           Whether to start the server.]: :_default' \
'*--server=[Manage servers of the host controller. Servers are specified as a comma seperated list of <name>\[\:<server-group>\]\[\:<offset>\]\[\:start\].  The option can be specified multiple times.  <name>          The name of the server. This part is mandatory and must be first.                 All other parts are optional. <server-group>  The name of the server group. Allowed values are '\''main-server-group'\'' or '\''msg'\'',                 and '\''other-server-group'\'' or '\''osg'\''. If not specified, '\''main-server-group'\'' is used. <offset>        The port offset. If not specified, 100 is used from the second server onwards. start           Whether to start the server.]: :_default' \
'*--operations=[A comma seperated list of operations to bootstrap the host controller. Can be provided multiple times.]: :_default' \
'--cli=[A file with operations to bootstrap the host controller]: :_default' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':wildfly-version -- A single WildFly version or version range:_default' \
'*::wildfly-parameters -- Parameters passed to the domain controller:_default' \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the host controller \[default\: wfadm-hc-<major><minor>\]]: :_default' \
'--name=[The name of the host controller \[default\: wfadm-hc-<major><minor>\]]: :_default' \
'-a[Stop all running host controllers. If specified with a version, stop all running host controllers of that version.]' \
'--all[Stop all running host controllers. If specified with a version, stop all running host controllers of that version.]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::wildfly-version -- A single WildFly version or version range:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__hc__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-hc-help-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(topology)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_wfadm__topology_commands" \
"*::: :->topology" \
&& ret=0

    case $state in
    (topology)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-topology-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':setup -- The topology setup:_default' \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':setup -- The topology setup:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__topology__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-topology-help-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(images)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(ps)
_arguments "${_arguments_options[@]}" : \
'--standalone[List standalone containers only]' \
'--domain[List domain controller and host controller containers only]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(console)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the standalone server or domain controller \[default\: wfadm-sa|dc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--name=[The name of the standalone server or domain controller \[default\: wfadm-sa|dc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'(-n --name)-m+[The published management port. Not allowed when multiple versions are specified.]: :_default' \
'(-n --name)--management=[The published management port. Not allowed when multiple versions are specified.]: :_default' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::wildfly-version -- A single WildFly version or version range.
If omitted the console is opened for all running standalone and domain controller containers.:_default' \
&& ret=0
;;
(cli)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the standalone server or domain controller \[default\: wfadm-sa|dc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'--name=[The name of the standalone server or domain controller \[default\: wfadm-sa|dc-<major><minor>\]. Not allowed when multiple versions are specified.]: :_default' \
'(-n --name)-m+[The published management port]: :_default' \
'(-n --name)--management=[The published management port]: :_default' \
'-u+[The username to connect to the CLI]: :_default' \
'--username=[The username to connect to the CLI]: :_default' \
'-p+[The password to connect to the CLI]: :_default' \
'--password=[The password to connect to the CLI]: :_default' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::wildfly-version -- A single WildFly version.
Can be omitted if only one standalone or domain controller is running.:_default' \
'*::cli-parameters -- Parameters passed to the CLI:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-help-command-$line[1]:"
        case $line[1] in
            (build)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(dc)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__help__dc_commands" \
"*::: :->dc" \
&& ret=0

    case $state in
    (dc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-help-dc-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(hc)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__help__hc_commands" \
"*::: :->hc" \
&& ret=0

    case $state in
    (hc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-help-hc-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(topology)
_arguments "${_arguments_options[@]}" : \
":: :_wfadm__help__topology_commands" \
"*::: :->topology" \
&& ret=0

    case $state in
    (topology)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wfadm-help-topology-command-$line[1]:"
        case $line[1] in
            (start)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(images)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(ps)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(console)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(cli)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_wfadm_commands] )) ||
_wfadm_commands() {
    local commands; commands=(
'build:Build images' \
'push:Push images' \
'start:Start a standalone server' \
'stop:Stop a standalone server' \
'dc:Start and stop a domain controller' \
'hc:Start and stop a host controller' \
'topology:Start and stop a topology defined in YAML' \
'images:List all available standalone, domain and host controller images' \
'ps:List running standalone, domain and host controller containers' \
'console:Open the management console' \
'cli:Connect to the CLI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm commands' commands "$@"
}
(( $+functions[_wfadm__build_commands] )) ||
_wfadm__build_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm build commands' commands "$@"
}
(( $+functions[_wfadm__cli_commands] )) ||
_wfadm__cli_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm cli commands' commands "$@"
}
(( $+functions[_wfadm__console_commands] )) ||
_wfadm__console_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm console commands' commands "$@"
}
(( $+functions[_wfadm__dc_commands] )) ||
_wfadm__dc_commands() {
    local commands; commands=(
'start:Start a domain controller' \
'stop:Stop a domain controller' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm dc commands' commands "$@"
}
(( $+functions[_wfadm__dc__help_commands] )) ||
_wfadm__dc__help_commands() {
    local commands; commands=(
'start:Start a domain controller' \
'stop:Stop a domain controller' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm dc help commands' commands "$@"
}
(( $+functions[_wfadm__dc__help__help_commands] )) ||
_wfadm__dc__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm dc help help commands' commands "$@"
}
(( $+functions[_wfadm__dc__help__start_commands] )) ||
_wfadm__dc__help__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm dc help start commands' commands "$@"
}
(( $+functions[_wfadm__dc__help__stop_commands] )) ||
_wfadm__dc__help__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm dc help stop commands' commands "$@"
}
(( $+functions[_wfadm__dc__start_commands] )) ||
_wfadm__dc__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm dc start commands' commands "$@"
}
(( $+functions[_wfadm__dc__stop_commands] )) ||
_wfadm__dc__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm dc stop commands' commands "$@"
}
(( $+functions[_wfadm__hc_commands] )) ||
_wfadm__hc_commands() {
    local commands; commands=(
'start:Start a host controller' \
'stop:Stop a host controller' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm hc commands' commands "$@"
}
(( $+functions[_wfadm__hc__help_commands] )) ||
_wfadm__hc__help_commands() {
    local commands; commands=(
'start:Start a host controller' \
'stop:Stop a host controller' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm hc help commands' commands "$@"
}
(( $+functions[_wfadm__hc__help__help_commands] )) ||
_wfadm__hc__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm hc help help commands' commands "$@"
}
(( $+functions[_wfadm__hc__help__start_commands] )) ||
_wfadm__hc__help__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm hc help start commands' commands "$@"
}
(( $+functions[_wfadm__hc__help__stop_commands] )) ||
_wfadm__hc__help__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm hc help stop commands' commands "$@"
}
(( $+functions[_wfadm__hc__start_commands] )) ||
_wfadm__hc__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm hc start commands' commands "$@"
}
(( $+functions[_wfadm__hc__stop_commands] )) ||
_wfadm__hc__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm hc stop commands' commands "$@"
}
(( $+functions[_wfadm__help_commands] )) ||
_wfadm__help_commands() {
    local commands; commands=(
'build:Build images' \
'push:Push images' \
'start:Start a standalone server' \
'stop:Stop a standalone server' \
'dc:Start and stop a domain controller' \
'hc:Start and stop a host controller' \
'topology:Start and stop a topology defined in YAML' \
'images:List all available standalone, domain and host controller images' \
'ps:List running standalone, domain and host controller containers' \
'console:Open the management console' \
'cli:Connect to the CLI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm help commands' commands "$@"
}
(( $+functions[_wfadm__help__build_commands] )) ||
_wfadm__help__build_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help build commands' commands "$@"
}
(( $+functions[_wfadm__help__cli_commands] )) ||
_wfadm__help__cli_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help cli commands' commands "$@"
}
(( $+functions[_wfadm__help__console_commands] )) ||
_wfadm__help__console_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help console commands' commands "$@"
}
(( $+functions[_wfadm__help__dc_commands] )) ||
_wfadm__help__dc_commands() {
    local commands; commands=(
'start:Start a domain controller' \
'stop:Stop a domain controller' \
    )
    _describe -t commands 'wfadm help dc commands' commands "$@"
}
(( $+functions[_wfadm__help__dc__start_commands] )) ||
_wfadm__help__dc__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help dc start commands' commands "$@"
}
(( $+functions[_wfadm__help__dc__stop_commands] )) ||
_wfadm__help__dc__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help dc stop commands' commands "$@"
}
(( $+functions[_wfadm__help__hc_commands] )) ||
_wfadm__help__hc_commands() {
    local commands; commands=(
'start:Start a host controller' \
'stop:Stop a host controller' \
    )
    _describe -t commands 'wfadm help hc commands' commands "$@"
}
(( $+functions[_wfadm__help__hc__start_commands] )) ||
_wfadm__help__hc__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help hc start commands' commands "$@"
}
(( $+functions[_wfadm__help__hc__stop_commands] )) ||
_wfadm__help__hc__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help hc stop commands' commands "$@"
}
(( $+functions[_wfadm__help__help_commands] )) ||
_wfadm__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help help commands' commands "$@"
}
(( $+functions[_wfadm__help__images_commands] )) ||
_wfadm__help__images_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help images commands' commands "$@"
}
(( $+functions[_wfadm__help__ps_commands] )) ||
_wfadm__help__ps_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help ps commands' commands "$@"
}
(( $+functions[_wfadm__help__push_commands] )) ||
_wfadm__help__push_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help push commands' commands "$@"
}
(( $+functions[_wfadm__help__start_commands] )) ||
_wfadm__help__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help start commands' commands "$@"
}
(( $+functions[_wfadm__help__stop_commands] )) ||
_wfadm__help__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help stop commands' commands "$@"
}
(( $+functions[_wfadm__help__topology_commands] )) ||
_wfadm__help__topology_commands() {
    local commands; commands=(
'start:Start a topology' \
'stop:Stop a topology' \
    )
    _describe -t commands 'wfadm help topology commands' commands "$@"
}
(( $+functions[_wfadm__help__topology__start_commands] )) ||
_wfadm__help__topology__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help topology start commands' commands "$@"
}
(( $+functions[_wfadm__help__topology__stop_commands] )) ||
_wfadm__help__topology__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm help topology stop commands' commands "$@"
}
(( $+functions[_wfadm__images_commands] )) ||
_wfadm__images_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm images commands' commands "$@"
}
(( $+functions[_wfadm__ps_commands] )) ||
_wfadm__ps_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm ps commands' commands "$@"
}
(( $+functions[_wfadm__push_commands] )) ||
_wfadm__push_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm push commands' commands "$@"
}
(( $+functions[_wfadm__start_commands] )) ||
_wfadm__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm start commands' commands "$@"
}
(( $+functions[_wfadm__stop_commands] )) ||
_wfadm__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm stop commands' commands "$@"
}
(( $+functions[_wfadm__topology_commands] )) ||
_wfadm__topology_commands() {
    local commands; commands=(
'start:Start a topology' \
'stop:Stop a topology' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm topology commands' commands "$@"
}
(( $+functions[_wfadm__topology__help_commands] )) ||
_wfadm__topology__help_commands() {
    local commands; commands=(
'start:Start a topology' \
'stop:Stop a topology' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wfadm topology help commands' commands "$@"
}
(( $+functions[_wfadm__topology__help__help_commands] )) ||
_wfadm__topology__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm topology help help commands' commands "$@"
}
(( $+functions[_wfadm__topology__help__start_commands] )) ||
_wfadm__topology__help__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm topology help start commands' commands "$@"
}
(( $+functions[_wfadm__topology__help__stop_commands] )) ||
_wfadm__topology__help__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm topology help stop commands' commands "$@"
}
(( $+functions[_wfadm__topology__start_commands] )) ||
_wfadm__topology__start_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm topology start commands' commands "$@"
}
(( $+functions[_wfadm__topology__stop_commands] )) ||
_wfadm__topology__stop_commands() {
    local commands; commands=()
    _describe -t commands 'wfadm topology stop commands' commands "$@"
}

if [ "$funcstack[1]" = "_wfadm" ]; then
    _wfadm "$@"
else
    compdef _wfadm wfadm
fi
